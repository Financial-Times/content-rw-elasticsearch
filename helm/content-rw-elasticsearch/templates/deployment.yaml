apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.service.name }}
  labels:
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    visualize: "true"
    app: {{ .Values.service.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.service.name }}
        visualize: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.service.name }}
            topologyKey: "kubernetes.io/hostname"
      serviceAccountName: {{ .Values.serviceAccountName }}
      containers:
      - name: {{ .Values.service.name }}
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ELASTICSEARCH_SAPI_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: aws.content.elasticsearch.v2.endpoint
        - name: ELASTICSEARCH_SAPI_INDEX
          value: "{{ .Values.env.ELASTICSEARCH_SAPI_INDEX }}"
        - name: KAFKA_CONSUMER_GROUP
          value: {{ .Values.service.name }}
        - name: KAFKA_TOPIC
          value: {{ .Values.env.KAFKA_TOPIC }}
        - name: KAFKA_TOPIC_OFFSET_FETCH_INTERVAL
          value: "{{ .Values.env.KAFKA_TOPIC_OFFSET_FETCH_INTERVAL }}"
        - name: KAFKA_TOPIC_LAG_TOLERANCE
          value: "{{ .Values.env.KAFKA_TOPIC_LAG_TOLERANCE }}"
        - name: KAFKA_ADDR
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: msk.kafka.broker.url
        - name: PUBLIC_CONCORDANCES_ENDPOINT
          value: "{{ .Values.env.PUBLIC_CONCORDANCES_ENDPOINT }}"
        - name: "BASE_API_URL"
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: api.host.with.protocol
        ports:
        - containerPort: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
        readinessProbe:
          httpGet:
            path: "/__gtg"
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 30
        resources:
{{ toYaml .Values.resources | indent 12 }}
